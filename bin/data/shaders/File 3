#version 150 core

layout(triangles) in;
layout(line_strip, max_vertices = 4) out;


uniform float thickness;
uniform vec3 lightDir;

//in vec2 varyingtexcoord[];
//out vec2 texcoord;

in VertexData {
vec2 texCoord;
vec3 normal;
} VertexIn[];

out VertexData {
vec2 texCoord;
vec3 normal;
} VertexOut;

void main()
{
//texcoord = varyingtexcoord[0];

//thickness = 20;

vec3 up = vec3(0, 0, 1);	// arbitrary up vector

vec3 p0 = gl_in[0].gl_Position.xyz;
vec3 p1 = gl_in[1].gl_Position.xyz;

vec3 dir = normalize(p1 - p0);			// normalized direction vector from p0 to p1
vec3 right = normalize(cross(dir, up));	// right vector
vec3 norm = cross(right, dir);
float fColMult = abs(dot(norm, lightDir));
vec4 colMult = vec4(fColMult, fColMult, fColMult, 3.0);

right += thickness;

gl_Position = vec4(p0 - right, 1.0);
VertexOut.normal = VertexIn[0].normal;
VertexOut.texCoord = VertexIn[0].texCoord;
EmitVertex();

gl_Position = vec4(p0 + right, 1.0);
VertexOut.normal = VertexIn[0].normal;
VertexOut.texCoord = VertexIn[0].texCoord;
EmitVertex();

gl_Position = vec4(p1 - right, 1.0);
VertexOut.normal = VertexIn[0].normal;
VertexOut.texCoord = VertexIn[0].texCoord;
EmitVertex();

gl_Position = vec4(p1 + right, 1.0);
VertexOut.normal = VertexIn[0].normal;
VertexOut.texCoord = VertexIn[0].texCoord;
EmitVertex();

EndPrimitive();

/*
gl_Position = gl_ModelViewProjectionMatrix * vec4(p0 - right, 1.0);
gl_FrontColor = gl_FrontColorIn[0] * colMult;
//gl_FrontColor = color * colMult;
EmitVertex();

gl_Position = gl_ModelViewProjectionMatrix * vec4(p0 + right, 1.0);
gl_FrontColor = gl_FrontColorIn[0] * colMult;
//gl_FrontColor = color * colMult;
EmitVertex();

gl_Position = gl_ModelViewProjectionMatrix * vec4(p1 - right, 1.0);
gl_FrontColor = gl_FrontColorIn[1] * colMult;
//gl_FrontColor = color * colMult;
EmitVertex();

gl_Position = gl_ModelViewProjectionMatrix * vec4(p1 + right, 1.0);
gl_FrontColor = gl_FrontColorIn[1] * colMult;
//gl_FrontColor = color * colMult;
EmitVertex();
*/
}
